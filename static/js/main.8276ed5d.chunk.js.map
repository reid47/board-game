{"version":3,"sources":["helpers.ts","settings.ts","game.ts","reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["randomNumber","min","max","Math","floor","random","mergeWithDefaults","given","width","height","boardDice","moveLengthDice","moveTotalDice","playerNames","Game","settings","playerCount","moveCount","currentScores","currentMove","currentSelection","isSelectionValid","board","possibleSelections","isOver","this","cells","total","nextMove","row","push","col","id","symbol","determineSymbol","owner","selected","calculateScores","calculatePossibleSelections","player","size","rollDice","target","number","Object","assign","cell","has","length","calculateSelectionTotal","checkSelectionValid","newSelection","foundDeselected","selectedCell","resetSelection","clearOrphanedCells","checkIfOver","firstRow","lastRow","clear","forEachCell","ownedVisitableCells","Set","visitQueue","opposingHomeRow","pop","add","checkNeighbor","r","c","neighbor","i","nextCell","result","lastSelectedCell","func","oddRow","oddCol","dice","die","gameReducer","game","action","type","selectCell","deselectCell","makeMove","window","confirm","passMove","clone","parsed","urlParams","URLSearchParams","location","search","parseNumber","key","parseInt","get","parseDice","allValues","getAll","map","value","split","num","parseFromQueryString","BoardCell","props","className","selectable","onClick","disabled","children","App","useReducer","dispatch","currentTotalString","formatMathExpression","join","splitPoint","start","slice","end","headerContent","score0","score1","style","rowCells","isSelected","undefined","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8276ed5d.chunk.js","sourcesContent":["import { Cell } from './game';\n\nexport function randomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function formatMathExpression(cells: Cell[]): string {\n  if (cells.length < 4) return cells.map(cell => cell.symbol).join('');\n\n  const endsInNumber = typeof cells[cells.length - 1].symbol === 'number';\n  const splitPoint = endsInNumber ? cells.length - 2 : cells.length - 1;\n  const start = cells.slice(0, splitPoint);\n  const end = cells.slice(splitPoint);\n\n  return `(${formatMathExpression(start)})${formatMathExpression(end)}`;\n}\n","export interface Settings {\n  width: number;\n  height: number;\n  boardDice: number[][];\n  moveLengthDice: number[][];\n  moveTotalDice: number[][];\n  playerNames: string[];\n}\n\nexport function mergeWithDefaults(given: Partial<Settings> = {}): Settings {\n  return {\n    width: given.width || 12,\n    height: given.height || 12,\n    boardDice: given.boardDice || [[1, 2, 3, 4, 5, 6]],\n    moveLengthDice: given.moveLengthDice || [\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    moveTotalDice: given.moveTotalDice || [\n      [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 5, 6]\n    ],\n    playerNames: ['player 1', 'player 2']\n  };\n}\n\nexport function parseFromQueryString(): Settings {\n  const parsed: Settings = mergeWithDefaults({});\n\n  const urlParams = new URLSearchParams(window.location.search);\n\n  const parseNumber = (key: keyof Settings) => {\n    if (urlParams.has(key)) {\n      parsed[key] = parseInt(urlParams.get(key) as string) as any;\n    }\n  };\n\n  const parseDice = (key: keyof Settings) => {\n    if (urlParams.has(key)) {\n      const allValues = urlParams.getAll(key);\n      parsed[key] = allValues.map(value =>\n        value.split(',').map(num => parseInt(num))\n      ) as any;\n    }\n  };\n\n  parseNumber('width');\n  parseNumber('height');\n  parseDice('boardDice');\n  parseDice('moveTotalDice');\n  parseDice('moveLengthDice');\n\n  if (urlParams.has('player1')) {\n    parsed.playerNames[0] = urlParams.get('player1') as string;\n  }\n\n  if (urlParams.has('player2')) {\n    parsed.playerNames[1] = urlParams.get('player2') as string;\n  }\n\n  return parsed;\n}\n","import { randomNumber } from './helpers';\nimport { mergeWithDefaults, Settings } from './settings';\n\nexport interface Cell {\n  id: string;\n  row: number;\n  col: number;\n  symbol: string | number;\n  owner: number;\n  selected: boolean;\n}\n\nexport interface Move {\n  number: number;\n  player: number;\n  size: number;\n  target: number;\n}\n\nexport class Game {\n  settings: Settings;\n  playerCount: number;\n  moveCount: number;\n  currentScores: number[];\n  currentMove: Move;\n  currentSelection: { cells: Cell[]; total: number };\n  isSelectionValid: boolean;\n  board: Cell[][];\n  possibleSelections: Set<string>;\n  isOver: boolean;\n\n  constructor(settings?: Settings) {\n    this.settings = mergeWithDefaults(settings);\n    this.playerCount = 2;\n    this.board = [];\n    this.currentSelection = { cells: [], total: 0 };\n    this.moveCount = 0;\n    this.currentMove = this.nextMove();\n    this.currentScores = [0, 0];\n    this.isSelectionValid = false;\n    this.isOver = false;\n\n    for (let row = 0; row < this.settings.height; row++) {\n      this.board.push([]);\n\n      for (let col = 0; col < this.settings.width; col++) {\n        const id = `${row},${col}`;\n        const symbol = this.determineSymbol(row, col);\n        let owner = -1;\n        if (typeof symbol === 'number') {\n          if (row === 0) owner = 0;\n          else if (row === this.settings.height - 1) owner = 1;\n        }\n\n        this.board[row].push({ id, row, col, symbol, owner, selected: false });\n      }\n    }\n\n    this.calculateScores();\n    this.possibleSelections = this.calculatePossibleSelections();\n  }\n\n  nextMove(): Move {\n    const { moveLengthDice, moveTotalDice } = this.settings;\n\n    const player =\n      this.moveCount === 0\n        ? randomNumber(0, 1)\n        : (this.currentMove.player + 1) % this.playerCount;\n\n    const size = this.rollDice(moveLengthDice);\n    const target = this.rollDice(moveTotalDice);\n\n    return {\n      number: this.moveCount++,\n      player,\n      size,\n      target\n    };\n  }\n\n  clone(): Game {\n    return Object.assign(new Game(), this);\n  }\n\n  selectCell(row: number, col: number) {\n    const cell = this.cell(row, col);\n    if (!cell || !this.possibleSelections.has(cell.id)) return;\n\n    if (this.currentSelection.cells.length >= this.currentMove.size) {\n      return;\n    }\n\n    cell.selected = true;\n    this.currentSelection.cells.push(cell);\n    this.currentSelection.total = this.calculateSelectionTotal();\n    this.possibleSelections = this.calculatePossibleSelections();\n    this.checkSelectionValid();\n  }\n\n  deselectCell(row: number, col: number) {\n    if (!this.currentSelection.cells.length) return;\n\n    const newSelection = [];\n\n    let foundDeselected = false;\n    for (const selectedCell of this.currentSelection.cells) {\n      if (selectedCell.row === row && selectedCell.col === col) {\n        selectedCell.selected = false;\n        foundDeselected = true;\n      } else if (foundDeselected) {\n        selectedCell.selected = false;\n      } else {\n        newSelection.push(selectedCell);\n      }\n    }\n\n    this.currentSelection.cells = newSelection;\n    this.currentSelection.total = this.calculateSelectionTotal();\n    this.possibleSelections = this.calculatePossibleSelections();\n    this.checkSelectionValid();\n  }\n\n  resetSelection() {\n    for (const selectedCell of this.currentSelection.cells) {\n      selectedCell.selected = false;\n    }\n\n    this.currentSelection = { cells: [], total: 0 };\n    this.possibleSelections = this.calculatePossibleSelections();\n    this.checkSelectionValid();\n  }\n\n  passMove() {\n    this.currentMove = this.nextMove();\n    this.resetSelection();\n  }\n\n  makeMove() {\n    if (!this.isSelectionValid) return;\n\n    for (const selectedCell of this.currentSelection.cells) {\n      selectedCell.owner = this.currentMove.player;\n      selectedCell.selected = false;\n    }\n\n    this.clearOrphanedCells();\n    this.calculateScores();\n\n    this.currentMove = this.nextMove();\n    this.resetSelection();\n    this.checkIfOver();\n  }\n\n  isSelected(row: number, col: number): boolean {\n    return this.cell(row, col)?.selected || false;\n  }\n\n  private checkIfOver() {\n    const firstRow = this.board[0];\n    const lastRow = this.board[this.settings.height - 1];\n\n    for (let col = 0; col < this.settings.width; col++) {\n      if (firstRow[col].owner === 1 || lastRow[col].owner === 0) {\n        this.possibleSelections.clear();\n        this.isOver = true;\n        return;\n      }\n    }\n  }\n\n  private checkSelectionValid() {\n    if (!this.currentSelection.cells.length) {\n      this.isSelectionValid = false;\n      return;\n    }\n\n    const lastSelectedCell = this.currentSelection.cells[\n      this.currentSelection.cells.length - 1\n    ];\n\n    if (typeof lastSelectedCell.symbol !== 'number') {\n      this.isSelectionValid = false;\n      return;\n    }\n\n    if (this.currentSelection.total !== this.currentMove.target) {\n      this.isSelectionValid = false;\n      return;\n    }\n\n    this.isSelectionValid = true;\n  }\n\n  private calculateScores() {\n    this.currentScores = [0, 0];\n\n    this.forEachCell(cell => {\n      if (cell.owner < 0) return;\n      this.currentScores[cell.owner]++;\n    });\n  }\n\n  private clearOrphanedCells() {\n    const ownedVisitableCells = new Set();\n    const visitQueue: Cell[] = [];\n\n    // Enqueue the owned home row number cells for non-current player\n    const opposingHomeRow =\n      this.currentMove.player === 0 ? this.settings.height - 1 : 0;\n    for (let col = 0; col < this.settings.width; col++) {\n      const cell = this.cell(opposingHomeRow, col)!;\n      if (typeof cell.symbol !== 'number') continue;\n      if (cell.owner > -1 && cell.owner !== this.currentMove.player) {\n        visitQueue.push(cell);\n      }\n    }\n\n    // Visit all adjacent cells owned by non-current player\n    while (visitQueue.length) {\n      const cell = visitQueue.pop()!;\n      if (ownedVisitableCells.has(cell.id)) continue;\n      ownedVisitableCells.add(cell.id);\n\n      const checkNeighbor = (r: number, c: number) => {\n        const neighbor = this.cell(r, c);\n\n        if (\n          neighbor &&\n          neighbor.owner > -1 &&\n          neighbor.owner !== this.currentMove.player\n        ) {\n          visitQueue.push(this.cell(r, c)!);\n        }\n      };\n\n      checkNeighbor(cell.row - 1, cell.col);\n      checkNeighbor(cell.row + 1, cell.col);\n      checkNeighbor(cell.row, cell.col - 1);\n      checkNeighbor(cell.row, cell.col + 1);\n\n      // checking diagonals\n      checkNeighbor(cell.row - 1, cell.col - 1);\n      checkNeighbor(cell.row + 1, cell.col + 1);\n      checkNeighbor(cell.row - 1, cell.col + 1);\n      checkNeighbor(cell.row + 1, cell.col - 1);\n    }\n\n    // Clear all previously owned cells not reachable from home row\n    this.forEachCell(cell => {\n      if (\n        cell.owner !== this.currentMove.player &&\n        !ownedVisitableCells.has(cell.id)\n      ) {\n        cell.owner = -1;\n      }\n    });\n  }\n\n  private cell(row: number, col: number): Cell | undefined {\n    const r = this.board[row];\n    return r && r[col];\n  }\n\n  private calculateSelectionTotal() {\n    let total = 0;\n    let i = 0;\n\n    while (i < this.currentSelection.cells.length) {\n      const cell = this.currentSelection.cells[i];\n\n      if (i === 0) {\n        total += cell.symbol as number;\n        i++;\n        continue;\n      }\n\n      const nextCell = this.currentSelection.cells[i + 1];\n      if (!nextCell) break;\n\n      switch (cell.symbol) {\n        case '+': {\n          total += nextCell.symbol as number;\n          break;\n        }\n        case '-': {\n          total -= nextCell.symbol as number;\n          break;\n        }\n        case '*': {\n          total *= nextCell.symbol as number;\n          break;\n        }\n      }\n\n      i += 2;\n    }\n\n    return total;\n  }\n\n  private calculatePossibleSelections() {\n    const result = new Set<string>();\n\n    if (!this.currentSelection.cells.length) {\n      this.forEachCell(cell => {\n        if (\n          cell.owner === this.currentMove.player &&\n          typeof cell.symbol === 'number'\n        ) {\n          result.add(cell.id);\n        }\n      });\n\n      return result;\n    }\n\n    if (this.currentSelection.cells.length >= this.currentMove.size) {\n      return result;\n    }\n\n    const lastSelectedCell = this.currentSelection.cells[\n      this.currentSelection.cells.length - 1\n    ];\n\n    this.forEachCell(cell => {\n      if (cell.selected) return;\n\n      if (\n        this.cell(cell.row - 1, cell.col) === lastSelectedCell ||\n        this.cell(cell.row + 1, cell.col) === lastSelectedCell ||\n        this.cell(cell.row, cell.col - 1) === lastSelectedCell ||\n        this.cell(cell.row, cell.col + 1) === lastSelectedCell\n      )\n        result.add(cell.id);\n    });\n\n    return result;\n  }\n\n  private forEachCell(func: (cell: Cell) => any) {\n    for (let row = 0; row < this.settings.height; row++) {\n      for (let col = 0; col < this.settings.width; col++) {\n        const cell = this.board[row][col];\n        func(cell);\n      }\n    }\n  }\n\n  private determineSymbol(row: number, col: number): '+' | '-' | '*' | number {\n    const oddRow = row % 2 === 0;\n    const oddCol = col % 2 === 0;\n    const isNumber = (oddRow && !oddCol) || (!oddRow && oddCol);\n\n    if (isNumber) {\n      return this.rollDice(this.settings.boardDice);\n    }\n\n    return ['+', '-', '*'][randomNumber(0, 2)] as '+' | '-' | '*';\n  }\n\n  private rollDice(dice: number[][]) {\n    let result = 0;\n\n    for (const die of dice) {\n      result += die[randomNumber(0, die.length - 1)];\n    }\n\n    return result;\n  }\n}\n","import { Game } from './game';\n\nexport type Action =\n  | {\n      type: 'selectCell';\n      row: number;\n      col: number;\n    }\n  | {\n      type: 'deselectCell';\n      row: number;\n      col: number;\n    }\n  | {\n      type: 'resetMove';\n    }\n  | {\n      type: 'confirmMove';\n    }\n  | {\n      type: 'passMove';\n    };\n\nexport function gameReducer(game: Game, action: Action): Game {\n  switch (action.type) {\n    case 'selectCell': {\n      game.selectCell(action.row, action.col);\n      break;\n    }\n\n    case 'deselectCell': {\n      game.deselectCell(action.row, action.col);\n      break;\n    }\n\n    case 'resetMove': {\n      game.resetSelection();\n      break;\n    }\n\n    case 'confirmMove': {\n      game.makeMove();\n      break;\n    }\n\n    case 'passMove': {\n      const answer = window.confirm('Are you sure you want to pass your turn?');\n      if (answer) game.passMove();\n      break;\n    }\n  }\n\n  return game.clone();\n}\n","import React, { useReducer } from 'react';\nimport './App.css';\nimport { Game } from './game';\nimport { formatMathExpression } from './helpers';\nimport { gameReducer } from './reducer';\nimport { parseFromQueryString } from './settings';\n\nconst settings = parseFromQueryString();\n\nfunction BoardCell(props: {\n  children: string | number;\n  owner: number;\n  selected: boolean;\n  selectable: boolean;\n  onClick: React.EventHandler<React.MouseEvent> | undefined;\n}) {\n  let className = 'cell';\n  if (props.owner > -1) className += ` player-${props.owner}`;\n  if (props.selected) className += ` selected`;\n  if (props.selectable) className += ` selectable`;\n\n  return (\n    <button\n      className={className}\n      onClick={props.onClick}\n      disabled={!props.selected && !props.selectable}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nfunction App() {\n  const [game, dispatch] = useReducer(gameReducer, new Game(settings));\n\n  const {\n    currentMove,\n    currentSelection,\n    currentScores,\n    isSelectionValid,\n    isOver\n  } = game;\n\n  const currentTotalString = currentSelection.cells.length\n    ? formatMathExpression(currentSelection.cells)\n    : '';\n\n  let headerContent = null;\n\n  if (isOver) {\n    const [score0, score1] = currentScores;\n    if (score0 > score1) {\n      headerContent = `${settings.playerNames[0]} wins!`;\n    } else if (score1 > score0) {\n      headerContent = `${settings.playerNames[1]} wins!`;\n    } else {\n      headerContent = \"It's a draw!\";\n    }\n  } else {\n    headerContent = (\n      <>\n        <div className=\"header-detail\">\n          {settings.playerNames[currentMove.player]}'s turn\n        </div>\n\n        <div className=\"header-detail\">\n          {currentTotalString}{' '}\n          {currentTotalString && (\n            <span>\n              = <b>{currentSelection.total}</b> |\n            </span>\n          )}{' '}\n          must total <b>{currentMove.target}</b>\n        </div>\n\n        <div className=\"header-detail\">\n          using <b>{currentSelection.cells.length}</b> of up to{' '}\n          <b>{currentMove.size}</b> squares\n        </div>\n\n        <button\n          className=\"header-button\"\n          disabled={currentSelection.cells.length === 0}\n          onClick={() => dispatch({ type: 'resetMove' })}\n        >\n          reset\n        </button>\n        <button\n          className=\"header-button\"\n          onClick={() => dispatch({ type: 'passMove' })}\n        >\n          pass\n        </button>\n        <button\n          className=\"header-button\"\n          disabled={!isSelectionValid}\n          onClick={() => dispatch({ type: 'confirmMove' })}\n        >\n          confirm\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"header-detail\">\n          {settings.playerNames[0]}: <b>{currentScores[0]}</b> squares |{' '}\n          {settings.playerNames[1]}: <b>{currentScores[1]}</b> squares\n        </div>\n\n        {headerContent}\n      </header>\n      <main>\n        <div\n          className=\"board\"\n          style={{ width: `${game.settings.width * 50}px` }}\n        >\n          {game.board.map((rowCells, row) => (\n            <div key={row} className=\"row\">\n              {rowCells.map((cell, col) => {\n                const selectable = game.possibleSelections.has(cell.id);\n                const selected = !selectable && game.isSelected(row, col);\n                const onClick = selectable\n                  ? () => dispatch({ type: 'selectCell', row, col })\n                  : selected\n                  ? () => dispatch({ type: 'deselectCell', row, col })\n                  : undefined;\n\n                return (\n                  <BoardCell\n                    key={cell.id}\n                    owner={cell.owner}\n                    selected={selected}\n                    selectable={selectable}\n                    onClick={onClick}\n                  >\n                    {cell.symbol}\n                  </BoardCell>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}